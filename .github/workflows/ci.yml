name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential wget
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install
        cd ..

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
        pip install pytest pytest-cov flake8 black mypy
      timeout-minutes: 20

    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

    - name: Check formatting with black
      run: |
        black --check src tests

    - name: Type check with mypy
      continue-on-error: true
      run: |
        mypy src --ignore-missing-imports

    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build API image
      run: |
        docker build -f docker/Dockerfile.api -t hft-api:latest .

    - name: Build Dashboard image
      run: |
        docker build -f docker/Dockerfile.dashboard -t hft-dashboard:latest .

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src -f json -o bandit-report.json || true

    - name: Run Safety check
      run: |
        pip install safety
        safety check --json || true

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install -r requirements-ci.txt
        pip install pytest-benchmark numpy

    - name: Run performance benchmarks
      run: |
        python -c "
        import time
        import numpy as np
        from src.features.order_flow_imbalance import OFICalculator, OrderBookState

        # Benchmark OFI calculation
        calc = OFICalculator()
        state = OrderBookState(
            timestamp=1000,
            bids=[(100.0 - 0.01*i, 10.0) for i in range(10)],
            asks=[(100.0 + 0.01*i, 10.0) for i in range(10)]
        )

        start = time.time()
        for _ in range(1000):
            calc.update(state)
            metrics = calc.compute_ofi(state, num_levels=10)
        elapsed = time.time() - start

        print(f'OFI calculation: {elapsed*1000:.2f}ms for 1000 iterations')
        print(f'Average: {elapsed:.4f}ms per iteration')

        assert elapsed < 1.0, 'Performance regression detected'
        "
