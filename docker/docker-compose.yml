version: '3.8'

services:
  # PostgreSQL with TimescaleDB for time-series data
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: hft-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-hft_orderbook}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - hft-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # InfluxDB for high-frequency tick data
  influxdb:
    image: influxdb:2.7
    container_name: hft-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUX_USER:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUX_PASSWORD:-password}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUX_ORG:-hft-org}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUX_BUCKET:-orderbook-data}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUX_TOKEN:-my-super-secret-auth-token}
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - hft-network
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Kafka for streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: hft-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - hft-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: hft-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - hft-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: hft-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hft-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    command: redis-server --appendonly yes

  # FastAPI Prediction Service
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: hft-api
    depends_on:
      - postgres
      - redis
      - kafka
    ports:
      - "8000:8000"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-hft_orderbook}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      ENVIRONMENT: production
    volumes:
      - ../models/saved:/app/models/saved:ro
      - ../logs:/app/logs
    networks:
      - hft-network
    restart: unless-stopped

  # Streamlit Dashboard
  dashboard:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dashboard
    container_name: hft-dashboard
    depends_on:
      - postgres
      - api
    ports:
      - "8501:8501"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-hft_orderbook}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      API_URL: http://api:8000
    volumes:
      - ../data:/app/data:ro
      - ../logs:/app/logs
    networks:
      - hft-network
    restart: unless-stopped

  # Data Ingestion Service
  ingestion:
    build:
      context: ..
      dockerfile: docker/Dockerfile.ingestion
    container_name: hft-ingestion
    depends_on:
      - kafka
      - postgres
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-hft_orderbook}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
    networks:
      - hft-network
    restart: unless-stopped

networks:
  hft-network:
    driver: bridge

volumes:
  postgres_data:
  influxdb_data:
  kafka_data:
  redis_data:
